/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HAD;

import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class HAD_Info extends javax.swing.JFrame {

    ArrayList<Integer> idList = new ArrayList<>();

    /**
     * Creates new form Details
     */
    public HAD_Info() {
        initComponents();
    }

    //Binary Search for price
    private double binarySearch(int[] a, int x) {
        Arrays.sort(a); // sorting the array of the price list using Arrays.sort() method 
        System.out.println(Arrays.toString(a));
        int size = a.length;
        int low = 0;
        int high = size - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (a[mid] == x) {
                return a[mid];
            } else if (x > a[mid]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rangeLevelButton = new javax.swing.ButtonGroup();
        categoryCheckBox = new javax.swing.ButtonGroup();
        recommendationButton = new javax.swing.ButtonGroup();
        box = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        close = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        discountButtonGroup = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        searchCategory = new javax.swing.JComboBox<>();
        searchByCategory = new javax.swing.JButton();
        sideBarPanel = new javax.swing.JPanel();
        inputIconPanel = new javax.swing.JPanel();
        inputIcon = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        homeIconPanel = new javax.swing.JPanel();
        homeIcon = new javax.swing.JLabel();
        homeLabel = new javax.swing.JLabel();
        tableIconPanel = new javax.swing.JPanel();
        detailsIcon = new javax.swing.JLabel();
        tableDetailsLabel = new javax.swing.JLabel();
        panelComponents = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        accessoriesNoLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        recommendationLabel = new javax.swing.JLabel();
        rangeLevelLabel = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox<>();
        low = new javax.swing.JRadioButton();
        medium = new javax.swing.JRadioButton();
        high = new javax.swing.JRadioButton();
        accessoriesNoField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        recommendation1 = new javax.swing.JCheckBox();
        recommendation2 = new javax.swing.JCheckBox();
        recommendation3 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        acessory = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        checkBox1 = new javax.swing.JCheckBox();
        checkBox3 = new javax.swing.JCheckBox();
        checkBox2 = new javax.swing.JCheckBox();
        idField = new javax.swing.JTextField();
        valid = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        tableDetailsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();
        clearTable = new javax.swing.JButton();
        clearSelectedRow = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFiles = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        box.setTitle("About ");

        jLabel1.setText("Home appliances details is an application developed");

        jLabel3.setText("to help the people involved in daily transaction of ");

        jLabel4.setText("the company with a motive to maintain and update ");

        jLabel6.setText("Product version: 1.0");

        jLabel7.setText("records of transaction of the company in a systematic ");

        jLabel8.setText("way.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(17, 17, 17)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        jLabel9.setText("Product version: 1.0");

        jLabel10.setText("Developed By: Abhishek Rana Magar, Bishal Shrestha, Sangam Thapa");

        jLabel11.setText("Magar and Roshan Dhakal");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel9))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/info.png"))); // NOI18N

        javax.swing.GroupLayout boxLayout = new javax.swing.GroupLayout(box.getContentPane());
        box.getContentPane().setLayout(boxLayout);
        boxLayout.setHorizontalGroup(
            boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxLayout.createSequentialGroup()
                .addGroup(boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(boxLayout.createSequentialGroup()
                        .addGroup(boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(boxLayout.createSequentialGroup()
                                .addGroup(boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(boxLayout.createSequentialGroup()
                                        .addGap(85, 85, 85)
                                        .addComponent(jLabel2))
                                    .addGroup(boxLayout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(boxLayout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(close)))
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boxLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        boxLayout.setVerticalGroup(
            boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxLayout.createSequentialGroup()
                .addGroup(boxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(boxLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(boxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(close)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home Appliances Details");
        setName("Home Appliances Details"); // NOI18N
        setResizable(false);

        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerPanel.setBackground(new java.awt.Color(0, 153, 153));
        headerPanel.setForeground(new java.awt.Color(0, 51, 102));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Home Appliances Details");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        search.setText("Search By Price :");
        search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        searchCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Washing Machine", "Refrigerator", "Oven", "Vaccumm", "Air Conditioner" }));
        searchCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        searchByCategory.setText("Search By Category");
        searchByCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchByCategory)
                .addGap(18, 18, 18)
                .addComponent(searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search)
                    .addComponent(searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByCategory))
                .addContainerGap())
        );

        backgroundPanel.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 50));

        sideBarPanel.setBackground(new java.awt.Color(255, 102, 102));
        sideBarPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sideBarPanel.setLayout(null);

        inputIconPanel.setBackground(new java.awt.Color(255, 153, 153));
        inputIconPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputIconPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inputIconPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inputIconPanelMousePressed(evt);
            }
        });
        inputIconPanel.setLayout(null);

        inputIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stepIn.png"))); // NOI18N
        inputIconPanel.add(inputIcon);
        inputIcon.setBounds(20, 10, 30, 30);

        inputLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        inputLabel.setForeground(new java.awt.Color(255, 255, 255));
        inputLabel.setText("Input");
        inputIconPanel.add(inputLabel);
        inputLabel.setBounds(60, 14, 40, 20);

        sideBarPanel.add(inputIconPanel);
        inputIconPanel.setBounds(0, 140, 150, 40);

        homeIconPanel.setBackground(new java.awt.Color(255, 153, 153));
        homeIconPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        homeIconPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeIconPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                homeIconPanelMousePressed(evt);
            }
        });
        homeIconPanel.setLayout(null);

        homeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/homeIcon.png"))); // NOI18N
        homeIconPanel.add(homeIcon);
        homeIcon.setBounds(20, 10, 30, 30);

        homeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        homeLabel.setForeground(new java.awt.Color(255, 255, 255));
        homeLabel.setText("Home");
        homeIconPanel.add(homeLabel);
        homeLabel.setBounds(60, 20, 40, 15);

        sideBarPanel.add(homeIconPanel);
        homeIconPanel.setBounds(0, 100, 150, 40);

        tableIconPanel.setBackground(new java.awt.Color(255, 153, 153));
        tableIconPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tableIconPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableIconPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableIconPanelMousePressed(evt);
            }
        });
        tableIconPanel.setLayout(null);

        detailsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/infoIcon.png"))); // NOI18N
        tableIconPanel.add(detailsIcon);
        detailsIcon.setBounds(20, 10, 30, 30);

        tableDetailsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tableDetailsLabel.setForeground(new java.awt.Color(255, 255, 255));
        tableDetailsLabel.setText("Table Details");
        tableIconPanel.add(tableDetailsLabel);
        tableDetailsLabel.setBounds(60, 10, 80, 30);

        sideBarPanel.add(tableIconPanel);
        tableIconPanel.setBounds(0, 180, 150, 40);

        backgroundPanel.add(sideBarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 28, 150, 450));

        panelComponents.setBackground(new java.awt.Color(255, 255, 255));
        panelComponents.setEnabled(false);
        panelComponents.setLayout(new java.awt.CardLayout());

        inputPanel.setBackground(new java.awt.Color(255, 255, 255));
        inputPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        idLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        idLabel.setText("ID:");

        categoryLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        categoryLabel.setText("Select a Category:");

        accessoriesNoLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        accessoriesNoLabel.setText("Accessories No.:");
        accessoriesNoLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        priceLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        priceLabel.setText("Price:");

        recommendationLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        recommendationLabel.setText("Recommendation:");

        rangeLevelLabel.setText("Choose a Range :");

        comboBox.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Washing Machine", "Refrigerator", "Oven", "Vaccumm", "Air Conditioner" }));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        rangeLevelButton.add(low);
        low.setText("Low");
        low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowActionPerformed(evt);
            }
        });

        rangeLevelButton.add(medium);
        medium.setText("Medium");
        medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumActionPerformed(evt);
            }
        });

        rangeLevelButton.add(high);
        high.setText("High");
        high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highActionPerformed(evt);
            }
        });

        accessoriesNoField.setEditable(false);
        accessoriesNoField.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        accessoriesNoField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        priceField.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        priceField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(204, 204, 255));
        addButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addIcon.png"))); // NOI18N
        addButton.setText("Insert");
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        recommendationButton.add(recommendation1);
        recommendation1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        recommendation1.setText("Recommended by Company");

        recommendationButton.add(recommendation2);
        recommendation2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        recommendation2.setText("Recommended by Community");

        recommendationButton.add(recommendation3);
        recommendation3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        recommendation3.setText("No Recommendation Yet");

        jSeparator1.setBackground(new java.awt.Color(54, 33, 89));
        jSeparator1.setForeground(new java.awt.Color(54, 33, 89));

        acessory.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        acessory.setText("Select Accessory:");

        jSeparator2.setBackground(new java.awt.Color(54, 33, 89));

        jSeparator4.setBackground(new java.awt.Color(54, 33, 89));

        jSeparator3.setBackground(new java.awt.Color(54, 33, 89));

        jSeparator5.setBackground(new java.awt.Color(54, 33, 89));

        categoryCheckBox.add(checkBox1);
        checkBox1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        checkBox1.setText("Front Load");
        checkBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBox1ActionPerformed(evt);
            }
        });

        categoryCheckBox.add(checkBox3);
        checkBox3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        checkBox3.setText("Front Load Washer Dryer");
        checkBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBox3ActionPerformed(evt);
            }
        });

        categoryCheckBox.add(checkBox2);
        checkBox2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        checkBox2.setText("Top Load");
        checkBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBox2ActionPerformed(evt);
            }
        });

        idField.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        jLabel13.setText("Discount:");

        discountButtonGroup.add(jRadioButton1);
        jRadioButton1.setText("5%");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        discountButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("10%");

        discountButtonGroup.add(jRadioButton3);
        jRadioButton3.setText("15%");

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                            .addComponent(jSeparator4)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator5)
                            .addComponent(recommendation1)
                            .addComponent(recommendation3)
                            .addComponent(recommendation2)
                            .addComponent(recommendationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(checkBox1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addGap(77, 77, 77))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(rangeLevelLabel)
                                .addGap(147, 147, 147)
                                .addComponent(jLabel13))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(valid, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(399, Short.MAX_VALUE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(low)
                        .addGap(18, 18, 18)
                        .addComponent(medium)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(high)
                        .addGap(60, 60, 60)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton3)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(accessoriesNoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accessoriesNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(acessory)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBox3)
                                    .addComponent(checkBox2))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel)
                    .addComponent(acessory))
                .addGap(12, 12, 12)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBox3)
                .addGap(3, 3, 3)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accessoriesNoLabel)
                    .addComponent(accessoriesNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rangeLevelLabel)
                    .addComponent(jLabel13))
                .addGap(13, 13, 13)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(low)
                    .addComponent(medium)
                    .addComponent(high)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valid, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(priceLabel)))
                .addGap(16, 16, 16)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recommendationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recommendation1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recommendation2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addButton)
                    .addComponent(recommendation3, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        panelComponents.add(inputPanel, "card2");

        tableDetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
        tableDetailsPanel.setLayout(null);

        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Washing Machine", "Top Load", "WT020", "20000", "Low", "Recommended by Company"},
                {" 2", "Oven", "Microwave Oven", "OM030", "16000", "Low", "Not Recommended by Company"},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Category", "Accessories Namel", "Accessories No.", "Price", "Range Level", "Recommendation"
            }
        ));
        tableInfo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableInfo.setRowHeight(20);
        tableInfo.setShowGrid(false);
        jScrollPane1.setViewportView(tableInfo);
        if (tableInfo.getColumnModel().getColumnCount() > 0) {
            tableInfo.getColumnModel().getColumn(0).setPreferredWidth(57);
            tableInfo.getColumnModel().getColumn(1).setPreferredWidth(80);
            tableInfo.getColumnModel().getColumn(2).setPreferredWidth(132);
            tableInfo.getColumnModel().getColumn(3).setPreferredWidth(110);
            tableInfo.getColumnModel().getColumn(4).setPreferredWidth(90);
            tableInfo.getColumnModel().getColumn(5).setPreferredWidth(85);
            tableInfo.getColumnModel().getColumn(6).setPreferredWidth(180);
        }

        tableDetailsPanel.add(jScrollPane1);
        jScrollPane1.setBounds(0, 10, 730, 390);

        clearTable.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        clearTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png"))); // NOI18N
        clearTable.setText("Clear Table");
        clearTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });
        tableDetailsPanel.add(clearTable);
        clearTable.setBounds(210, 400, 130, 33);

        clearSelectedRow.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        clearSelectedRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png"))); // NOI18N
        clearSelectedRow.setText("Clear Selected Row");
        clearSelectedRow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearSelectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectedRowActionPerformed(evt);
            }
        });
        tableDetailsPanel.add(clearSelectedRow);
        clearSelectedRow.setBounds(370, 400, 190, 33);

        panelComponents.add(tableDetailsPanel, "card3");

        backgroundPanel.add(panelComponents, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 740, 440));

        jMenu1.setText("File");

        openFiles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/openIcon.png"))); // NOI18N
        openFiles.setText("Open Files");
        openFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilesActionPerformed(evt);
            }
        });
        jMenu1.add(openFiles);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/saveIcon.png"))); // NOI18N
        saveFile.setText("Save File");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        jMenu1.add(saveFile);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exitIcon.png"))); // NOI18N
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        about.setBackground(new java.awt.Color(255, 255, 255));
        about.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/aboutIcon.png"))); // NOI18N
        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        jMenu2.add(about);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputIconPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputIconPanelMousePressed
        /*if the input bar is pressed the input panel is set to visible and the table
        details to false method call for setcolor() and resetColor()
         */
        setColor(inputIconPanel);
        resetColor(homeIconPanel);
        resetColor(tableIconPanel);
        if (evt.getSource() == inputIconPanel) {
            inputPanel.setVisible(true);
            tableDetailsPanel.setVisible(false);
        }
    }//GEN-LAST:event_inputIconPanelMousePressed

    private void homeIconPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeIconPanelMousePressed
        /* if the home bar is pressed the welecome frame is opened
        method call for setcolor() and resetColor()
         */
        setColor(homeIconPanel);
        resetColor(inputIconPanel);
        resetColor(tableIconPanel);
        this.setVisible(false);
        WelcomeScreen had = new WelcomeScreen();
        had.setVisible(true);
    }//GEN-LAST:event_homeIconPanelMousePressed

    private void tableIconPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableIconPanelMousePressed
        /*if the table bar is pressed the input panel is set visible to false and the 
        table details to visible true method call for setcolor() and resetColor()
         */
        setColor(tableIconPanel);
        resetColor(homeIconPanel);
        resetColor(inputIconPanel);
        if (evt.getSource() == tableIconPanel) {
            inputPanel.setVisible(false);
            tableDetailsPanel.setVisible(true);
        }
    }//GEN-LAST:event_tableIconPanelMousePressed

    private void clearSelectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectedRowActionPerformed
        //code for clearing or deleting the selected row in the table
        int selectedRow = tableInfo.getSelectedRow();
        DefaultTableModel table1 = (DefaultTableModel) tableInfo.getModel();
        //if the table is not empty then then it goes to if part
        if (tableInfo.getRowCount() != 0) {
            if (selectedRow >= 0) {
                //option pane shown for deleting the selected row
                int confirmDialog = JOptionPane.showConfirmDialog(this, "Do you want to Delete the Selected Row?", "Clearing Selected Row!!!", JOptionPane.YES_NO_OPTION);
                if (confirmDialog == JOptionPane.YES_OPTION) {
                    //if yes option is selected in the confirmation dialog the selected row is deleted
                    table1.removeRow(selectedRow);
                }
            } else {
                //warning message displayed if the row is not selected 
                JOptionPane.showMessageDialog(this, "Please Select the row to Delete!!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            // warning message displayed if the table is empty
            JOptionPane.showMessageDialog(this, "The Table is Empty!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_clearSelectedRowActionPerformed

    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        //code for clearing the entire data in the table
        if (tableInfo.getRowCount() != 0) {
            //if the table data is not equal to zero the confirm dialog message shown 
            int confirmDialog = JOptionPane.showConfirmDialog(this, "Do you want to Delete the Table Data?", "Clearing Table Data!!!", JOptionPane.YES_NO_OPTION);
            if (confirmDialog == JOptionPane.YES_OPTION) {

                DefaultTableModel defaultModel = (DefaultTableModel) this.tableInfo.getModel();
                int rowCount = defaultModel.getRowCount();
                //Remove rows one by one from the end of the table
                for (int i = rowCount - 1; i >= 0; i--) {
                    defaultModel.removeRow(i);
                }
            }
        } else {
            //warning message displayed if the table is empty
            JOptionPane.showMessageDialog(this, "The Table is Empty!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_clearTableActionPerformed

    private void openFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilesActionPerformed
        //code for opening the files
        /*Using this process to invoke the contructor, 
         JFileChooser points to user's default directory*/
        JFileChooser chooser = new JFileChooser();

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String filename = file.getAbsolutePath();
            Runtime open = Runtime.getRuntime();
            try {
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + filename);
            } catch (IOException ex) {
                Logger.getLogger(HAD_Info.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //displaying the message if the file is not selected
            JOptionPane.showMessageDialog(this, "File was not selected", "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_openFilesActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // for exiting the project
        WindowEvent winCloseEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winCloseEvent);
    }//GEN-LAST:event_exitActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        //code for search item by price
        try {
            //if the data is not empty 
            if (tableInfo.getRowCount() != 0) {
                int rows = tableInfo.getRowCount();
                int searchIndex = 4;//index where the price is present
                int searchPrice = Integer.parseInt(searchField.getText()); //price field
                int datarows = 0;
                for (int i = 0; i < rows; i++) {
                    if ((tableInfo.getValueAt(i, searchIndex)) == null) {
                        break;
                    }
                    datarows++;
                }
                //if the search field is not empty and the rows in the table is not empty then it goes inside if statement
                //if the user type price less than 1 
                if (0 < searchPrice && !"".equals(searchPrice) && datarows != 0x0) {

                    int findItem = Integer.parseInt(searchField.getText());
                    int data[] = new int[datarows];

                    for (int i = 0; i < datarows; i++) {
                        String string = tableInfo.getValueAt(i, searchIndex).toString();
                        int ID = Integer.parseInt(string);
                        data[i] = ID;
                    }
                    //printing the unsorted list in the terminal
                    System.out.println(Arrays.toString(data));
                    int searchResult = (int) binarySearch(data, findItem); //method call for the binary search with data and findItem as parameter

                    //printing the sorted list in the terminal
                    System.out.println(searchResult);

                    //if the search result is not equals to -1 the it goes inside if statement
                    if (searchResult != -1) {
                        for (int i = 0; i < tableInfo.getRowCount(); i++) {
                            if (Integer.parseInt(tableInfo.getValueAt(i, searchIndex).toString()) == searchResult) {
                                int categoryName = 1; //index of category column
                                int accessoriesName = 2; //index of acessories name column
                                String displayCategory = (String) tableInfo.getValueAt(i, categoryName);
                                String dispalyAccessoriesName = (String) tableInfo.getValueAt(i, accessoriesName);
                                //message is displayed if the search result is found
                                JOptionPane.showMessageDialog(this, "Search Found!!! \n" + "Price: " + findItem + "\nCategory: " + displayCategory + "\nAccessory Name: " + dispalyAccessoriesName, "Message", JOptionPane.INFORMATION_MESSAGE);
                                searchField.setText(null);
                                break;
                            }
                        }
                    } else {
                        //if the search item is not in the table message is displayed
                        JOptionPane.showMessageDialog(this, "Search Not Found!", "Message", JOptionPane.WARNING_MESSAGE);
                        searchField.setText(null);
                    }
                } else {
                    //warning message displayed if the field is empty
                    JOptionPane.showMessageDialog(this, "Please Enter Valid Price!!!", "Message", JOptionPane.WARNING_MESSAGE);
                    searchField.setText(null);
                }
            } else {
                //warning message displayed if the table is empty
                JOptionPane.showMessageDialog(this, "The Table is Empty!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
                searchField.setText(null);
            }
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(this, "Error!!! Please, Enter Price number!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
            searchField.setText(null);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // code for saving the table data in the text file
        int save = JOptionPane.showConfirmDialog(null, "Do you want to save the table data?", "Save", JOptionPane.YES_NO_OPTION);
        if (save == JOptionPane.YES_OPTION) { // if yes option is clicked in the option pane
            int x = 1;
            do {
                try {
                    String filename = JOptionPane.showInputDialog("Enter file Name");
                    //creates the file
                    File file = new File(filename);
                    FileOutputStream outputStream = new FileOutputStream(file, true);
                    if (save == 0) {
                        /* creates filewriter object
                        initializing bufferedwriter*/
                        try ( FileWriter writer = new FileWriter(file);
                              BufferedWriter bufferWriter = new BufferedWriter(writer)) {
                            for (int i = 0; i < tableInfo.getRowCount(); i++) { //row
                                for (int j = 0; j < tableInfo.getColumnCount(); j++) { //column
                                    bufferWriter.write(tableInfo.getValueAt(i, j) + "\t| ");
                                }
                                //use of write() method to write the data
                                bufferWriter.write("\n_________________________________________________"
                                        + "__________________________________________________________");
                                bufferWriter.newLine();// simply write in the new line

                            }
                            bufferWriter.close();//closing bufferedwriter to end the operation
                        }
                        //displaying the message when the data is saved
                        JOptionPane.showMessageDialog(this, "Data is saved.", "Message!!!", JOptionPane.INFORMATION_MESSAGE);
                    }
                    x = 2;
                } catch (FileNotFoundException e) {
                    //Displaying the message dialog if the file name empty of invalid
                    JOptionPane.showMessageDialog(this, "The File Name is Empty or Invalid.", "Message!!!", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(HAD_Info.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException e) {
                    //Displaying the message if the file is not saved
                    JOptionPane.showMessageDialog(this, "File is not Saved.", "Message!!!", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            } while (x == 1);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        box.setVisible(false);// setting the about dialogue box to null
    }//GEN-LAST:event_closeActionPerformed

    private void searchByCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByCategoryActionPerformed
        //code for the search item by category
        //if the table is not empty 
        if (tableInfo.getRowCount() != 0) {
            String categorySearch = (String) searchCategory.getSelectedItem();
            int searchIndex = 1;//index where the category is present
            int rows = tableInfo.getRowCount();
            int datarows = 0;
            int n = 0;

            for (int i = 0; i < rows; i++) {
                if ((tableInfo.getValueAt(i, searchIndex)) == null) {
                    break;
                }
                datarows++;
            }

            String displayAccessories = "";
            for (int i = 0; i < datarows; i++) {
                if (((String) tableInfo.getValueAt(i, searchIndex)).equals(categorySearch)) {
                    int accessoriesNameIndex = 2;//index for accessoriesName 
                    //if the category is found the accessories is added in the displayAccessories
                    displayAccessories += (n + 1) + ". " + ((String) tableInfo.getValueAt(i, accessoriesNameIndex)) + "\n";
                    n++;
                }
            }
            if (!"".equals(displayAccessories)) {
                //message is displayed if the searched category is available in the table
                JOptionPane.showMessageDialog(this, displayAccessories, (n) + " Accessory From " + categorySearch + " is Found!!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                //message is displayed if the searched category is not available in the table
                JOptionPane.showMessageDialog(this, "Accessories From " + categorySearch + " Category is not Available!!", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            //message is displayed if the table is empty
            JOptionPane.showMessageDialog(this, "The Table is Empty!!!", "Message!!!", JOptionPane.WARNING_MESSAGE);
        }
    
    }//GEN-LAST:event_searchByCategoryActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lowActionPerformed

    private void checkBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBox2ActionPerformed
        // code for changing the accessories number accordin to the checkbox clicked
        if (comboBox.getSelectedIndex() == 0 && checkBox2.isSelected()) {
            accessoriesNoField.setText("WT002");
        } else if (comboBox.getSelectedIndex() == 1 && checkBox2.isSelected()) {
            accessoriesNoField.setText("RD011");
        } else if (comboBox.getSelectedIndex() == 2 && checkBox2.isSelected()) {
            accessoriesNoField.setText("OC021");
        } else if (comboBox.getSelectedIndex() == 3 && checkBox2.isSelected()) {
            accessoriesNoField.setText("VH031");
        } else if (comboBox.getSelectedIndex() == 4 && checkBox2.isSelected()) {
            accessoriesNoField.setText("AW041");
        } else {
            accessoriesNoField.setText(null);
        }
    }//GEN-LAST:event_checkBox2ActionPerformed

    private void checkBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBox3ActionPerformed
        // code for changing the accessories number accordin to the checkbox clicked
        if (comboBox.getSelectedIndex() == 0 && checkBox3.isSelected()) {
            accessoriesNoField.setText("WF003");
        } else if (comboBox.getSelectedIndex() == 1 && checkBox3.isSelected()) {
            accessoriesNoField.setText("RT012");
        } else if (comboBox.getSelectedIndex() == 2 && checkBox3.isSelected()) {
            accessoriesNoField.setText("OT022");
        } else if (comboBox.getSelectedIndex() == 3 && checkBox3.isSelected()) {
            accessoriesNoField.setText("VW032");
        } else if (comboBox.getSelectedIndex() == 4 && checkBox3.isSelected()) {
            accessoriesNoField.setText("AF042");
        } else {
            accessoriesNoField.setText(null);
        }
    }//GEN-LAST:event_checkBox3ActionPerformed

    private void checkBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBox1ActionPerformed
        // code for changing the accessories number accordin to the checkbox clicked
        if (comboBox.getSelectedIndex() == 0 && checkBox1.isSelected()) {
            accessoriesNoField.setText("WM001");
        } else if (comboBox.getSelectedIndex() == 1 && checkBox1.isSelected()) {
            accessoriesNoField.setText("RS010");
        } else if (comboBox.getSelectedIndex() == 2 && checkBox1.isSelected()) {
            accessoriesNoField.setText("OM020");
        } else if (comboBox.getSelectedIndex() == 3 && checkBox1.isSelected()) {
            accessoriesNoField.setText("VR030");
        } else if (comboBox.getSelectedIndex() == 4 && checkBox1.isSelected()) {
            accessoriesNoField.setText("AC040");
        } else {
            accessoriesNoField.setText(null);
        }
    }//GEN-LAST:event_checkBox1ActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //code for inserting the details in the table
        try {
            int a = Integer.parseInt(idField.getText());
            int rowCount = tableInfo.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                idList.add(Integer.parseInt(tableInfo.getValueAt(i, 0).toString()));
            }
            if (idList.contains(a)) {
                JOptionPane.showMessageDialog(this, "Please enter the another ID.", "Message!!!", JOptionPane.WARNING_MESSAGE);
            } else {
                int id = Integer.parseInt(idField.getText());
                String category = (String) comboBox.getSelectedItem();
                String accessoriesName = " ";
                String accessoriesNo = accessoriesNoField.getText();
                String rangeLevel = " ";
                int price = Integer.parseInt(priceField.getText());
                String recommendation = " ";
                String errorMessage = "";

                //selection of the checkbox for the accessories name
                if (checkBox1.isSelected()) {
                    accessoriesName = checkBox1.getText();
                } else if (checkBox3.isSelected()) {
                    accessoriesName = checkBox3.getText();
                } else {
                    accessoriesName = checkBox2.getText();
                }

                //selection of the radio button for the range level

                //selection of the check box for the recommendation
                if (recommendation1.isSelected()) {
                    recommendation = recommendation1.getText();
                } else if (recommendation2.isSelected()) {
                    recommendation = recommendation2.getText();
                } else {
                    recommendation = recommendation3.getText();
                }

                // error message dialog displayed if the id field is empty
                if (id <= 0) {//if users enter valid id
                    errorMessage += "Please enter valid ID.\n";
                    if ("".equals(id)) {
                        errorMessage += "ID Field is Empty.\n";
                    }
                }
                //error message dialog displayed if the accessorieNo field is empty
                if ("".equals(accessoriesNo)) {
                    errorMessage += "Accessories No. Field is Empty.\n";
                }
                //error message dialog displayed if the price field is empty

                if (price <= 0) {//of the users enter the price less than 1
                    errorMessage += "Please enter valid price.\n";
                    if ("".equals(price)) {
                        errorMessage += "Price Field is Empty.\n";
                    }
                }
                //error message dialog displayed if the check box selection is not selected
                if (categoryCheckBox.getSelection() == null) {
                    errorMessage += "Please select Accessories in the CheckBox.\n ";
                }
                //error message dialog displayed if the radio button selection is not selected

                //error message dialog displayed if the check box selection is not selected
                if (recommendationButton.getSelection() == null) {
                    errorMessage += "Please Recommend Something \n";
                }

                //if there is no error message then the data is inserted to the table and the success message is displayed
                if (errorMessage.equals("")) {
                    DefaultTableModel table1 = (DefaultTableModel) tableInfo.getModel();
                    tableInfo.setModel(table1);
                    Object row[] = {id, category, accessoriesName, accessoriesNo, price, rangeLevel, recommendation};
                    table1.addRow(row);
                    JOptionPane.showMessageDialog(null, "The Data is Sucessfully Inserted In the Table.");
                    clearFields();//method call for clearing the fields

                } else {
                    // warning message is displayed if there is empty field in the input section
                    JOptionPane.showMessageDialog(this, errorMessage, "Error Message", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
            //if the input value for id and price is string instead of integer the warning message is displayed
            JOptionPane.showMessageDialog(this, "Please enter an Integer Value.\nThere was an Warning exception" + e, "Message", JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Please enter an Integer Value.", "Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldActionPerformed

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed

        //selecting the combobox for category and changing the checbox for accessories
        switch (comboBox.getSelectedIndex()) {
            case 0:
            checkBox1.setText("Front Load");
            checkBox2.setText("Top Load");
            checkBox3.setText("Front Load Washer Dryer");
            categoryCheckBox.clearSelection();
            accessoriesNoField.setText(null);
            break;
            case 1:
            checkBox1.setText("Single Door");
            checkBox2.setText("Double Door");
            checkBox3.setText("Top Mount Freezer");
            categoryCheckBox.clearSelection();
            accessoriesNoField.setText(null);
            break;
            case 2:
            checkBox1.setText("Microwave");
            checkBox2.setText("Convection");
            checkBox3.setText("Oven Toaster Grill");
            categoryCheckBox.clearSelection();
            accessoriesNoField.setText(null);
            break;
            case 3:
            checkBox1.setText("Robotic");
            checkBox2.setText("Hand Held");
            checkBox3.setText("Wet&Dry");
            categoryCheckBox.clearSelection();
            accessoriesNoField.setText(null);
            break;
            case 4:
            checkBox1.setText("Ceiling");
            checkBox2.setText("Wall");
            checkBox3.setText("Floor Standing Type");
            categoryCheckBox.clearSelection();
            accessoriesNoField.setText(null);
            break;
            default:
            break;
        }
    }//GEN-LAST:event_comboBoxActionPerformed

    private void highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_highActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // setting the size for the about dialogue box, location to center and visible true
        box.setSize(500, 290);
        box.setLocationRelativeTo(null);
        box.setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mediumActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    //method for color set
    public void setColor(JPanel panel) {
        panel.setBackground(new Color(255,102,102));
    }

    //method for color reset
    public void resetColor(JPanel panel) {
        panel.setBackground(new Color(255,153,153));
    }

    //method for setting the fields to null.
    public void clearFields() {
        idField.setText(null);
        accessoriesNoField.setText(null);
        priceField.setText(null);
        rangeLevelButton.clearSelection();
        categoryCheckBox.clearSelection();
        recommendationButton.clearSelection();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HAD_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HAD_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HAD_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HAD_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HAD_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JTextField accessoriesNoField;
    private javax.swing.JLabel accessoriesNoLabel;
    private javax.swing.JLabel acessory;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JDialog box;
    private javax.swing.ButtonGroup categoryCheckBox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JCheckBox checkBox1;
    private javax.swing.JCheckBox checkBox2;
    private javax.swing.JCheckBox checkBox3;
    private javax.swing.JButton clearSelectedRow;
    private javax.swing.JButton clearTable;
    private javax.swing.JButton close;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JLabel detailsIcon;
    private javax.swing.ButtonGroup discountButtonGroup;
    private javax.swing.JMenuItem exit;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JRadioButton high;
    private javax.swing.JLabel homeIcon;
    private javax.swing.JPanel homeIconPanel;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel inputIcon;
    private javax.swing.JPanel inputIconPanel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JRadioButton low;
    private javax.swing.JRadioButton medium;
    private javax.swing.JMenuItem openFiles;
    private javax.swing.JPanel panelComponents;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.ButtonGroup rangeLevelButton;
    private javax.swing.JLabel rangeLevelLabel;
    private javax.swing.JCheckBox recommendation1;
    private javax.swing.JCheckBox recommendation2;
    private javax.swing.JCheckBox recommendation3;
    private javax.swing.ButtonGroup recommendationButton;
    private javax.swing.JLabel recommendationLabel;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JButton search;
    private javax.swing.JButton searchByCategory;
    private javax.swing.JComboBox<String> searchCategory;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel sideBarPanel;
    private javax.swing.JLabel tableDetailsLabel;
    private javax.swing.JPanel tableDetailsPanel;
    private javax.swing.JPanel tableIconPanel;
    private javax.swing.JTable tableInfo;
    private javax.swing.JLabel valid;
    // End of variables declaration//GEN-END:variables
}
